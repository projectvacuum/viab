#!/usr/bin/python
#
#  vac-version-logger - General Vac version logging daemon 
#                       which runs on ViaB website
#
#  Andrew McNab, University of Manchester.
#  Copyright (c) 2013-6. All rights reserved.
#
#  Redistribution and use in source and binary forms, with or
#  without modification, are permitted provided that the following
#  conditions are met:
#
#    o Redistributions of source code must retain the above
#      copyright notice, this list of conditions and the following
#      disclaimer. 
#    o Redistributions in binary form must reproduce the above
#      copyright notice, this list of conditions and the following
#      disclaimer in the documentation and/or other materials
#      provided with the distribution. 
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
#  CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
#  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
#  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
#  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
#  TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
#  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
#  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
#  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.
#
#  Contacts: Andrew.McNab@cern.ch  http://www.gridpp.ac.uk/vac/
#

keyNames = [
  'boot_time',
  'factory',
  'factory_heartbeat_time',
  'kernel_version',
  'load_average',
  'mem_total_kb',
  'mem_used_kb',
  'metadata_heartbeat_time',
  'mjf_heartbeat_time',
  'os_issue',
  'responder_heartbeat_time',
  'root_disk_avail_kb',
  'running_cpus',
  'running_machines',
  'site',
  'space',
  'swap_free_kb',
  'swap_used_kb',
  'time_sent',
  'total_cpus',
  'total_hs06',
  'total_machines',
  'vac_disk_avail_kb',
  'vac_version'
]

import os
import sys
import json
import time
import socket
import stat
import MySQLdb

db  = None
cur = None

# viab_cgi_conf.py must define these variables:
#
# mysqlUser     = 'username'
# mysqlPassword = 'PAsSWoRd'
#

sys.path.append('/var/lib/viab/bin')
import viab_cgi_conf

def logLine(text):
  print time.strftime('%b %d %H:%M:%S : ') + text
  sys.stdout.flush()
    
#
# PROGRAM MAIN !!!
# 

if (os.fork() != 0):
  sys.exit() # first parent

else:
  os.chdir("/")
  os.umask(0) 

  if os.fork() != 0:
    sys.exit() # second parent

  else:
   si = file('/dev/null', 'r')
   os.dup2(si.fileno(), sys.stdin.fileno())

   so = file('/var/log/vac-version-logger', 'a+')
   os.dup2(so.fileno(), sys.stdout.fileno())
          
   se = file('/var/log/vac-version-logger', 'a+', 0)     
   os.dup2(se.fileno(), sys.stderr.fileno())

   open('/var/run/vac-version-logger.pid', 'w').write(str(os.getpid()) + '\n')

   sock = None

   logLine('vac-version-logger starts')

   while True:
   
     try:
       close(so)
     except:
       pass
           
     so = file('/var/log/vac-version-logger', 'a+')
     os.dup2(so.fileno(), sys.stdout.fileno())
          
     try:
       close(se)
     except:
       pass

     se = file('/var/log/vac-version-logger', 'a+', 0)     
     os.dup2(se.fileno(), sys.stderr.fileno())

     if sock is None:
       sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
#       vac.shared.setSockBufferSize(sock)
       sock.settimeout(60.0)

       try:
         sock.bind(('', 8884))
       except Exception as e:
         sock = None
         logLine('Failed to bind to Vac version logger port 8884: ' + str(e))
         time.sleep(60.0)
         continue
             
     try:
       pr = open('/var/run/vac-version-logger.pid', 'r')
       pid = int(pr.read().strip())
       pr.close()
       
       if pid != os.getpid():
         logLine('os.getpid ' + os.getpid() + ' does not match vac-version-logger.pid ' + pid + ' - exiting')
         break
                
     except:
       logLine('no vac-version-logger.pid - exiting')
       break

     # so log file is updated before we start waiting
     sys.stdout.flush()
     sys.stderr.flush()

     try:
       data, addr = sock.recvfrom(2048)
     except socket.error as msg:
       continue

     try:
       factoryMessage = json.loads(data)
     except:
       continue

     logLine('Received: ' + str(factoryMessage))

     if (('method'       not in factoryMessage) or (factoryMessage['method']       != 'factory')) and \
        (('message_type' not in factoryMessage) or (factoryMessage['message_type'] != 'factory_status')):
       # Not a message we handle
       continue

     try:
       db  = MySQLdb.connect(host="localhost", user=viab_cgi_conf.mysqlUser, passwd=viab_cgi_conf.mysqlPassword, db='viab')
       cur = db.cursor(MySQLdb.cursors.DictCursor)
     except Exception as e:
       logLine('Failed with database problem (' + str(e) + ')')
       continue
       
     sqlFormat = 'REPLACE LOW_PRIORITY factoryversions SET time_received=NOW()'
     sqlList   = []
 
     for key in keyNames:

       try:
         value = factoryMessage[key]
       except:
         continue
    
       if 'time' in key:
         sqlFormat += (',' + key + '=FROM_UNIXTIME(%s)')       
       else:
         sqlFormat += (',' + key + '=%s')

       sqlList.append(value)

     try:
       cur.execute(sqlFormat, sqlList)
     except Exception as e:
       logLine('Failed logging factory message to MySQL: ' + str(e))
       continue

   sys.exit(0) # if we break out of while loop then we exit

