#!/usr/bin/python
#
#  viabcgi - Vac-in-a-Box CGI script
#
#  Andrew McNab, University of Manchester.
#  Copyright (c) 2015-6. All rights reserved.
#
#  Redistribution and use in source and binary forms, with or
#  without modification, are permitted provided that the following
#  conditions are met:
#
#    o Redistributions of source code must retain the above
#      copyright notice, this list of conditions and the following
#      disclaimer. 
#    o Redistributions in binary form must reproduce the above
#      copyright notice, this list of conditions and the following
#      disclaimer in the documentation and/or other materials
#      provided with the distribution. 
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
#  CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
#  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
#  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
#  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
#  TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
#  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
#  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
#  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.
#
#  Contacts: Andrew.McNab@cern.ch  http://www.gridpp.ac.uk/vac/
#

import os
import re
import sys
import cgi
import stat
import time
import shutil
import hashlib
import tempfile
import inspect
import MySQLdb
import textwrap

db  = None
cur = None

# viab_cgi_conf.py must define these variables:
#
# mysqlUser     = 'username'
# mysqlPassword = 'PAsSWoRd'
# adminDNs      = [ '/DC=com/DC=example/CN=name' ] 
# formHashSalt  = '1234567890'
#
import viab_cgi_conf

def oddEven(n):
  return 'even' if n % 2 == 0 else 'odd'

def htmlFormCookie(userDN):

  timeForm = str(int(time.time()))

  print ('<input type="hidden" name="formcookie" value="' + 
         timeForm + ':' +
         hashlib.sha256(timeForm + userDN + viab_cgi_conf.formHashSalt).hexdigest()         
         + '">')

def htmlHeader(title):
  print 'Content-Type: text/html'
  print
  print '<html><head><title>' + title + '</title>'
  print open('/var/lib/viab/www/header.html', 'r').read().replace('/docs/VERSION/','/docs/' + prodVersion + '/')

def htmlFooter(userDN):
  if userDN:
    print open('/var/lib/viab/www/footer.html', 'r').read().replace('<!--##YOUARE##-->','You are ' + userDN)
  else:
    print open('/var/lib/viab/www/footer.html', 'r').read()
    
  print '</html>'

def errorPage(requestURI, userDN, title, message):

  htmlHeader(title)

  print '<h1>' + title + '</h1>'
  print '<p>' + message
  print '<p  style="text-align: center"><button type="button" onclick="location.href=\'' + requestURI + '\';">Continue</button>'

  htmlFooter(userDN)
#    errorPage(requestURI, userDN, 'Some sort of problem ...', 'There was some sort of problem with the value(s) you gave!') ; return

def deleteOrphans():

  global cur

  cur.execute('DELETE FROM sshkeys WHERE siteid NOT IN (SELECT t.siteid FROM sites t)')
  cur.execute('DELETE FROM sshfirewall WHERE siteid NOT IN (SELECT t.siteid FROM sites t)')
  cur.execute('DELETE FROM siteadmins WHERE siteid NOT IN (SELECT t.siteid FROM sites t)')
  cur.execute('DELETE FROM spaces WHERE siteid NOT IN (SELECT t.siteid FROM sites t)')
  cur.execute('DELETE FROM subnets WHERE spaceid NOT IN (SELECT s.spaceid FROM spaces s)')
  cur.execute('DELETE FROM factories WHERE spaceid NOT IN (SELECT s.spaceid FROM spaces s)')
  cur.execute('DELETE FROM machinetypes WHERE spaceid NOT IN (SELECT s.spaceid FROM spaces s)')
  cur.execute('DELETE FROM machinetypeopts WHERE machinetypeid NOT IN (SELECT m.machinetypeid FROM machinetypes m)')

def oneMachinetype(requestURI, userDN, cgiForm, siteName, siteID, spaceName, spaceID, machinetypeName, machinetypeID):

  global cur
  
  # All values here must be presented as strings!
  machinetypePresets = {

   'example' : { 'machine_model'         : 'cernvm3',
                 'user_data'             : 'https://repo.gridpp.ac.uk/vacproject/example/user_data',
                 'root_image'            : 'https://repo.gridpp.ac.uk/vacproject/example/cernvm3.iso',
                 'backoff_seconds'	 : '600',
                 'fizzle_seconds'	 : '600',
                 'max_wallclock_seconds' : '900', 
                 'target_share'          : '1.0',
                 'root_public_key'       : '/root/.ssh/id_rsa.pub',
                 'user_data_option_cvmfs_proxy' : 'http://169.254.169.253:3128/'
               },

   'GridPP' :  { 'machine_model'         : 'cernvm3',
                 'user_data'             : 'https://repo.gridpp.ac.uk/vacproject/gridpp/user_data',
                 'root_image'            : 'https://repo.gridpp.ac.uk/vacproject/gridpp/cernvm3.iso',
                 'backoff_seconds'	 : '3600',
                 'fizzle_seconds'	 : '600',
                 'max_wallclock_seconds' : '100000',
                 'target_share'          : '1.0',
                 'root_public_key'       : '/root/.ssh/id_rsa.pub',
                 'heartbeat_file'        : 'vm-heartbeat',
                 'heartbeat_seconds'     : '600',
                 'accounting_fqan'	 : '/gridpp/Role=NULL/Capability=NULL',
                 'user_data_option_dirac_site'  : 'CHANGEME',
                 'user_data_option_vo'   : 'gridpp',
                 'user_data_file_hostcert'      : 'hostcert.pem',
                 'user_data_file_hostkey'       : 'hostkey.pem',
                 'user_data_option_cvmfs_proxy' : 'http://169.254.169.253:3128/'
               },

   'ATLAS' :   { 'machine_model'         : 'cernvm3',
                 'user_data'             : 'https://repo.gridpp.ac.uk/vacproject/atlas/user_data',
                 'root_image'            : 'https://repo.gridpp.ac.uk/vacproject/atlas/cernvm3.iso',
                 'backoff_seconds'	 : '3600',
                 'fizzle_seconds'	 : '600',
                 'max_wallclock_seconds' : '172800',
                 'target_share'          : '1.0',
                 'root_public_key'       : '/root/.ssh/id_rsa.pub',
                 'heartbeat_file'        : 'heartbeat',
                 'heartbeat_seconds'     : '600',
                 'accounting_fqan'	 : '/atlas/Role=NULL/Capability=NULL',
                 'user_data_option_queue'       : 'CHANGEME',
                 'user_data_file_hostcert'      : 'hostcert.pem',
                 'user_data_file_hostkey'       : 'hostkey.pem',
                 'user_data_option_cvmfs_proxy' : 'http://169.254.169.253:3128/'
               },

   'CMS' :     { 'machine_model'         : 'cernvm3',
                 'user_data'             : 'https://repo.gridpp.ac.uk/vacproject/cms/user_data',
                 'root_image'            : 'https://repo.gridpp.ac.uk/vacproject/cms/cernvm3.iso',
                 'backoff_seconds'	 : '3600',
                 'fizzle_seconds'	 : '1800',
                 'max_wallclock_seconds' : '172800',
                 'target_share'          : '1.0',
                 'root_public_key'       : '/root/.ssh/id_rsa.pub',
                 'heartbeat_file'        : 'vm-heartbeat',
                 'heartbeat_seconds'     : '600',
                 'accounting_fqan'	 : '/cms/Role=NULL/Capability=NULL',
                 'user_data_option_entry'       : 'CHANGEME',
                 'user_data_option_checksum'    : 'CHANGEME',
                 'user_data_option_version'     : 'CHANGEME',
                 'user_data_file_hostcert'      : 'hostcert.pem',
                 'user_data_file_hostkey'       : 'hostkey.pem',
                 'user_data_option_cvmfs_proxy' : 'http://169.254.169.253:3128/'
               },

   'LHCb'   :  { 'machine_model'         : 'cernvm3',
                 'user_data'             : 'https://lhcb-portal-dirac.cern.ch/pilot/user_data',
                 'root_image'            : 'https://lhcbproject.web.cern.ch/lhcbproject/Operations/VM/cernvm3.iso',
                 'backoff_seconds'	 : '3600',
                 'fizzle_seconds'	 : '600',
                 'max_wallclock_seconds' : '172800',
                 'target_share'          : '1.0',
                 'root_public_key'       : '/root/.ssh/id_rsa.pub',
                 'heartbeat_file'        : 'vm-heartbeat',
                 'heartbeat_seconds'     : '600',
                 'accounting_fqan'	 : '/lhcb/Role=NULL/Capability=NULL',
                 'user_data_file_hostcert'      : 'hostcert.pem',
                 'user_data_file_hostkey'       : 'hostkey.pem',
                 'user_data_option_cvmfs_proxy' : 'http://169.254.169.253:3128/'
               }
                  }

  try:
    if cgiForm.getfirst('action') == 'uploadp12':

      cur.execute('UPDATE machinetypes SET p12=%s,p12updated=NOW() WHERE machinetypeid=%s', (cgiForm.getfirst('p12file'), machinetypeID) )

      print 'Status: 302 Found ' + str(inspect.currentframe().f_lineno)
      print 'Location: https://viab.gridpp.ac.uk' + requestURI
      print
      return
  except:
    pass

  try:
    if cgiForm['action'].value == 'clonemachinetype' and cgiForm['clonename']:

      cloneName = cgiForm['clonename'].value.strip()

      if cloneName.translate(None, 'abcdefghijklmnopqrstuvwxyz01234567890.-') != '':
        print 'Content-Type: text/html'
        print
        print 'machinetype names are limited to lowercase letters numbers -'
        return

      # Exclude any reserved /etc/vac.d/*.conf filenames here
      if cloneName == 'settings':
        print 'Content-Type: text/html'
        print
        print 'machinetypes cannot be called settings'
        return

      cur.execute('SELECT p12,p12updated FROM machinetypes WHERE machinetypeid=%s', machinetypeID)
      rows = cur.fetchall()

      cur.execute('INSERT INTO machinetypes SET spaceid=%s,machinetypename=%s,p12=%s,p12updated=%s',
                  (spaceID, cloneName, rows[0]['p12'], rows[0]['p12updated']))

      cur.execute('INSERT INTO machinetypeopts (machinetypeid,optname,value) SELECT %s,optname,value FROM machinetypeopts WHERE machinetypeid=%s',
                  (cur.lastrowid, machinetypeID) )

      print 'Status: 302 Found ' + str(inspect.currentframe().f_lineno)
      print 'Location: https://viab.gridpp.ac.uk/dashboard/' + siteName + '/' + spaceName + '/machinetypes/' + cloneName + '/'
      print
      return
  except:
    pass

  try:
    if cgiForm['action'].value == 'movemachinetype' and cgiForm['newspaceid']:

      newSpaceID = int(cgiForm['newspaceid'].value.strip())

      cur.execute('UPDATE machinetypes SET spaceid=%s WHERE machinetypeid=%s', (newSpaceID, machinetypeID))

      print 'Status: 302 Found ' + str(inspect.currentframe().f_lineno)
      print 'Location: https://viab.gridpp.ac.uk' + requestURI
      print
      return
  except:
    pass

  try:
    if cgiForm['action'].value == 'addpresets' and cgiForm['submit']:

      presetmachinetypeName = cgiForm['submit'].value.strip()

      if presetmachinetypeName in machinetypePresets:
        for presetOptName in machinetypePresets[presetmachinetypeName]:                
          cur.execute('INSERT INTO machinetypeopts SET machinetypeid=%s,optname=%s,value=%s',
                      (machinetypeID,
                       presetOptName, 
                       machinetypePresets[presetmachinetypeName][presetOptName]))      
      else:
        print 'Content-Type: text/html'
        print
        print 'machinetype presets not found!'
        return

      print 'Status: 302 Found ' + str(inspect.currentframe().f_lineno)
      print 'Location: https://viab.gridpp.ac.uk' + requestURI
      print
      return
  except:
    pass

  try:
    if cgiForm['action'].value == 'addoption' and cgiForm['optname'] and cgiForm['value']:
      cur.execute('INSERT INTO machinetypeopts SET machinetypeid=%s,optname=%s,value=%s',
                  (machinetypeID, cgiForm['optname'].value, cgiForm['value'].value.strip()))

      print 'Status: 302 Found ' + str(inspect.currentframe().f_lineno)
      print 'Location: https://viab.gridpp.ac.uk' + requestURI
      print
      return
  except:
    pass

  try:
    if cgiForm['action'].value == 'updateoption' and cgiForm['optname']:
    
      try:
        value = cgiForm['value'].value.strip()
      except:
        value = None
      else:
        if value == '':
          value = None
          
      if value is None:
        cur.execute('DELETE FROM machinetypeopts WHERE machinetypeid=%s AND optname=%s', 
                    (machinetypeID, cgiForm['optname'].value))
      else:
        try:
          cur.execute('UPDATE machinetypeopts SET value=%s WHERE machinetypeid=%s AND optname=%s', 
                      (value, machinetypeID, cgiForm['optname'].value))
        except:
          pass

      print 'Status: 302 Found ' + str(inspect.currentframe().f_lineno)
      print 'Location: https://viab.gridpp.ac.uk' + requestURI
      print
      return
  except:
    pass

  htmlHeader('machinetype ' + machinetypeName)
  
  print ('<div class="breadcrumbs"><a href="/dashboard/">Dashboard</a> ' + 
         '/ <a href="/dashboard/' + siteName + '/">' + siteName + '</a> ' +
         '/ <a href="/dashboard/' + siteName + '/' + spaceName + '/">' + spaceName + '</a> ' +
         '/ ' + machinetypeName + '</div>')

  print '<h1>machinetype&nbsp;' + machinetypeName + '</h1>'

  print '<h2>Options</h2>'
  
  cur.execute('SELECT machinetypeoptid,optname,value FROM machinetypeopts WHERE machinetypeid=%s', machinetypeID)
  rows = cur.fetchall()

  if len(rows) > 0:
    print '<p>To remove an option, set its value blank and update it'
    print '<p><table class="center">'
    print '<tr><th class="oddeven">Option</th><th class="oddeven">&nbsp;</th><th class="oddeven">Value</th></tr>'

    n=0    
    for row in rows:
      print '<tr><td class="' + oddEven(n) + '">' + row['optname'] + '</td>'
      print '<td class="' + oddEven(n) + '"> = </td><td class="' + oddEven(n) + '">'
    
      print '<form method="post" action="' + requestURI + '">' 
      print '<input type="hidden" name="action" value="updateoption">'
      print '<input type="hidden" name="optname" value="' + row['optname'] + '">'
      print '<input type="text" name="value" value="' + row['value'] + '" size="40">'
      htmlFormCookie(userDN)
      print '<input type="submit" value="Update option">'
      print '</form>'    
      print '</td></tr>\n'
      n += 1

    print '</table>'

  print '<h3>Add option</h3>'

  print '<form method="post" action="' + requestURI + '">'
  print '<input type="text" name="optname"> = <input type="text" name="value">'
  htmlFormCookie(userDN)
  print '<input type="submit" value="Add option"> <input type="hidden" name="action" value="addoption">'  
  print '</form>'

  print '<h3>Pre-set options</h3>'

  print '<p>You can use the buttons below to add a group of preset options to this '
  print 'machinetype if they do not already exist. Some options will still need '
  print "to be edited in line with the machinetype's own instructions and these "
  print 'have the default value CHANGEME.'

  print '<form method="post" action="' + requestURI + '">'
  print '<p style="text-align: center">machinetype name: '
  htmlFormCookie(userDN)
  print '<input type="hidden" name="action" value="addpresets">'

  for presetName in sorted(machinetypePresets):
    print '<input type="submit" name="submit" value="' + presetName + '">'

  print '</form>'

  print '<h2>Clone machinetype</h2>'

  print '<form method="post" action="' + requestURI + '">'
  print 'New machinetype name: <input type="text" name="clonename">'
  htmlFormCookie(userDN)
  print '<input type="submit" value="Clone machinetype"><input type="hidden" name="action" value="clonemachinetype">'
  print '</form>'


  cur.execute('SELECT spaces.spaceid,spacename FROM spaces LEFT JOIN machinetypes ON machinetypes.spaceid=spaces.spaceid AND machinetypes.machinetypename=%s WHERE siteid=%s AND spaces.spaceid<>%s AND machinetypes.machinetypeid IS NULL ORDER BY spacename',
              (machinetypeName, siteID, spaceID) )
  spaceRows = cur.fetchall()

  print '<h2>Move machinetype to another space</h2>'
  
  if len(spaceRows) > 0:
    print '<p>You can use this form to move this machinetype to another space at this site. Only spaces which do not already have a machinetype with the name &quot;' + machinetypeName + '&quot; are shown. '
    print '<form method="post" action="' + requestURI + '">'
    print 'New space: <select name="newspaceid">'

    for spaceRow in spaceRows:
      print '<option value="' + str(spaceRow['spaceid']) + '">' + spaceRow['spacename'] + '</option>'
    
    print '</select>'    
    print '<input type="submit" value="Move machinetype"><input type="hidden" name="action" value="movemachinetype">'
    htmlFormCookie(userDN)
    print '</form>'
  else:
    print '<p>There are no spaces at this site which you can move this machinetype to, either because there are no other spaces, or because they already have a machinetype with the name &quot;' + machinetypeName + '&quot;.'
      
  print '<h2>Certificate/key .p12 file</h2>'

  cur.execute('SELECT LENGTH(p12) AS p12len,p12,p12updated FROM machinetypes WHERE machinetypeid=%s', machinetypeID)
  rows = cur.fetchall()
  print '<p>.p12 file ' + str(rows[0]['p12len']) + ' bytes, updated ' + str(rows[0]['p12updated'])

  print '<h3>Upload .p12 file</h3>'
  
  print '<form method="post" action="' + requestURI + '" enctype="multipart/form-data">'
  print '<input type="file" name="p12file">'
  htmlFormCookie(userDN)
  print '<br><input type="submit" value="Upload .p12 file"> <input type="hidden" name="action" value="uploadp12">'  
  print '</form>'

  htmlFooter(userDN)

def oneFactory(requestURI, userDN, cgiForm, siteName, siteID, spaceName, spaceID, factoryName, factoryID):

  global cur
            
  try:

    if cgiForm['action'].value == 'updatefactory' and cgiForm['ip'] and cgiForm['mac']:

      try:
        mbPerCpu = int(cgiForm['mb_per_cpu'].value)
      except:
        mbPerCpu = 0

      try:
        udpTimeoutSeconds = float(cgiForm['udp_timeout_seconds'].value)
      except:
        udpTimeoutSeconds = 0.0

      try:
        cpuPerMachine = int(cgiForm['cpu_per_machine'].value)
      except:
        cpuPerMachine = 0

      try:
        hs06PerCpu = float(cgiForm['hs06_per_cpu'].value)
      except:
        hs06PerCpu = 0.0

      try:
        draining = int(cgiForm['draining'].value)
      except:
        draining = 0

      cur.execute('UPDATE factories SET ip=%s,mac=%s,mb_per_cpu=%s,udp_timeout_seconds=%s,' +
                  'cpu_per_machine=%s,hs06_per_cpu=%s,draining=%s,updated=NOW() ' +
                  'WHERE factoryid=%s AND spaceid=%s',
                  ( cgiForm['ip'].value, cgiForm['mac'].value, mbPerCpu, udpTimeoutSeconds,
                    cpuPerMachine, hs06PerCpu, draining,
                    factoryID, spaceID) )

      print 'Status: 302 Found ' + str(inspect.currentframe().f_lineno)
      print 'Location: https://viab.gridpp.ac.uk' + requestURI
      print
      return

  except:
    pass

  htmlHeader('Factory ' + factoryName)
    
  cur.execute('SELECT * FROM factories LEFT JOIN factoryversions ON factory=factoryname AND space=%s AND site=%s WHERE factoryID=%s', [spaceName, siteName, factoryID])
  rows = cur.fetchall()

  try:
    viab_version = re.search('\(ViaB ([^)]*)\)', rows[0]['os_issue']).group(1)
  except:
    viab_version = '???'
    
  try:
    vac_version = rows[0]['vac_version'].split()[1]
  except:
    vac_version = '???'

  print ('<div class="breadcrumbs"><a href="/dashboard/">Dashboard</a> ' + 
         '/ <a href="/dashboard/' + siteName + '/">' + siteName + '</a> ' +
         '/ <a href="/dashboard/' + siteName + '/' + spaceName + '/">' + spaceName + '</a> ' +
         '/ ' + factoryName + '</div>')

  print '<h1>Factory ' + factoryName + '</h1>'
    
  print '<form method="post" action="' + requestURI + '">'
  print '<table class="center">'
  print '<tr><td>Hostname:</td><td>' + factoryName + '</td></tr>'
  print '<tr><td>IP:</td><td><input type="text" name="ip" value="' + rows[0]['ip'] + '"></td></tr>'
  print '<tr><td>MAC:</td><td><input type="text" name="mac" value="' + rows[0]['mac'] + '"></td></tr>'
  print '<tr><td>mb_per_cpu:</td><td><input type="text" name="mb_per_cpu" value="' + str(rows[0]['mb_per_cpu']) + '"></td></tr>'
  print '<tr><td>udp_timeout_seconds:</td><td><input type="text" name="udp_timeout_seconds" value="' + str(rows[0]['udp_timeout_seconds']) + '"></td></tr>'
  print '<tr><td>cpu_per_machine:</td><td><input type="text" name="cpu_per_machine" value="' + str(rows[0]['cpu_per_machine']) + '"></td></tr>'
  print '<tr><td>hs06_per_cpu:</td><td><input type="text" name="hs06_per_cpu" value="' + str(rows[0]['hs06_per_cpu']) + '"></td></tr>'
  print '<tr><td>Draining:</td><td> Yes<input type="radio" name="draining" value="1" ' + ('checked' if rows[0]['draining'] == 1 else '') + \
          '> No<input type="radio" name="draining" value="0" ' + ('checked' if rows[0]['draining'] != 1 else '') + '> </td></tr>'

  print '<tr><td colspan=2 style="text-align: center"><input type="submit" value="Update factory"></td></tr>'
  htmlFormCookie(userDN)
  print '<input type="hidden" name="action" value="updatefactory">'

  print '<tr><td colspan=2>Remember that changes will only take effect once you have republished the configuration RPM and the factory has done its hourly automatic yum update!<p></td></tr>'

  print '<tr><td colspan=2 style="text-align: center"><b><big>Information from last Vac-in-a-Box heartbeat</big></b></td></tr>'
  print '<tr><td>Vac-in-a-Box heartbeat:</td><td>' + str(rows[0]['time_received']) + '</td></tr>'
  print '<tr><td>Vac-in-a-Box version:</td><td>' + viab_version + '</td></tr>'
  print '<tr><td>Vac version:</td><td>' + vac_version + '</td></tr>'
  print '<tr><td>Kernel version:</td><td>' + str(rows[0]['kernel_version']) + '</td></tr>'

  print '<tr><td>Boot time:</td><td>' + str(rows[0]['boot_time']) + '</td></tr>'
  print '<tr><td>Running processors:</td><td>' + str(rows[0]['running_cpus']) + '</td></tr>'
  print '<tr><td>Running machines:</td><td>' + str(rows[0]['running_machines']) + '</td></tr>'
  print '<tr><td>Max processors:</td><td>' + str(rows[0]['total_cpus']) + '</td></tr>'
  print '<tr><td>Max machines:</td><td>' + str(rows[0]['total_machines']) + '</td></tr>'
  print '<tr><td>Max HS06 in use:</td><td>' + str(rows[0]['total_hs06']) + '</td></tr>'
  print '<tr><td>Free disk (KB):</td><td>' + str(rows[0]['root_disk_avail_kb']) + '</td></tr>'
  print '<tr><td>Load average:</td><td>' + str(rows[0]['load_average']) + '</td></tr>'
  print '<tr><td>OS issue:</td><td>' + str(rows[0]['os_issue']) + '</td></tr>'
  print '<tr><td>Factory heartbeat:</td><td>' + str(rows[0]['factory_heartbeat_time']) + '</td></tr>'
  print '<tr><td>Responder heartbeat:</td><td>' + str(rows[0]['responder_heartbeat_time']) + '</td></tr>'
  print '<tr><td>httpd-mjf heartbeat:</td><td>' + str(rows[0]['mjf_heartbeat_time']) + '</td></tr>'
  print '<tr><td>httpd-metadata heartbeat:</td><td>' + str(rows[0]['metadata_heartbeat_time']) + '</td></tr>'
  print '<tr><td>Swap used (KB):</td><td>' + str(rows[0]['swap_used_kb']) + '</td></tr>'
  print '<tr><td>Swap free (KB):</td><td>' + str(rows[0]['swap_free_kb']) + '</td></tr>'
  print '<tr><td>Mem used (KB):</td><td>' + str(rows[0]['mem_used_kb']) + '</td></tr>'
  print '<tr><td>Mem total (KB):</td><td>' + str(rows[0]['mem_total_kb']) + '</td></tr>'
  print '</table>'
  
  print '</form>'

 
  htmlFooter(userDN)

def secondsToString(timeStamp):

  if timeStamp is None or timeStamp == 0:
    return ' - '
  
  seconds = int(time.time() - timeStamp)

  if seconds < 120:
    return str(seconds) + 's'
  elif seconds < 7200:
    return '%dm' % (seconds / 60)
  elif seconds < 172800:
    return '%dh' % (seconds / 3600)
  else:
    return '%dd' % (seconds / 86400)
  
def publishSpace(requestURI, userDN, siteName, siteID, spaceName, spaceID, spaceVersion):

  # Set up the temporary directory tree
  try:
    tempDir = tempfile.mkdtemp(prefix='viab-cgi-')
  except:
    return None

  # Run the viab-publish script on our temporary directory
  
  try:
    f = os.popen('/var/lib/viab/etc/' + spaceVersion + '/viab-publish ' + tempDir + ' ' + siteName + ' ' + spaceName + ' ' + spaceVersion + ' 2>&1', 'r')
    commandOutput = f.read()
    retCode = f.close()
  except:
    return None  

  if retCode is None:
    retCode = 0

  commandOutput += '\n(Return code of viab-publish = ' + str(retCode) + ')\n'

  # Clean up our temporary directory tree
  shutil.rmtree(tempDir)

  if retCode == 0:
    cur.execute('UPDATE spaces SET published=NOW(),publishlog=%s WHERE spaceID=%s', (str(commandOutput), str(spaceID)))
  else:
    cur.execute('UPDATE spaces SET publishlog=%s WHERE spaceID=%s', (str(commandOutput), str(spaceID)))

  print 'Status: 302 Found ' + str(inspect.currentframe().f_lineno)
  print 'Location: https://viab.gridpp.ac.uk' + requestURI
  print
  return

def oneSpace(requestURI, userDN, cgiForm, siteName, siteID, spaceName, spaceID, published, spaceVersion):

  global cur
  
  try:
    if cgiForm['action'].value == 'publish':
      publishSpace(requestURI, userDN, siteName, siteID, spaceName, spaceID, spaceVersion)
      return

  except:
    pass
          
  try:
    if cgiForm['action'].value == 'changeversion' and cgiForm['version'].value:
      newSpaceVersion = cgiForm['version'].value.strip()

      if '/' in newSpaceVersion or not os.path.isdir('/var/lib/viab/etc/' + newSpaceVersion):
        print 'Content-Type: text/html'
        print
        print 'Version ' + newSpaceVersion + ' does not exist!'
        return
               
      cur.execute('UPDATE spaces SET version=%s WHERE spaceid=%s', (newSpaceVersion, spaceID))

      print 'Status: 302 Found ' + str(inspect.currentframe().f_lineno)
      print 'Location: https://viab.gridpp.ac.uk' + requestURI
      print
      return

  except:
    pass
          
  try:
    if cgiForm['action'].value == 'addsubnet' and cgiForm['subnet'].value:
      subnet      = cgiForm['subnet'].value.strip()
      netmask     = cgiForm['netmask'].value.strip()
      router      = cgiForm['router'].value.strip()
      nameservers = cgiForm['nameservers'].value.strip()
      ntpservers  = cgiForm['ntpservers'].value.strip().lower()

      if not nameservers or nameservers.translate(None, '01234567890. ') != '':
        print 'Content-Type: text/html'
        print
        print 'Name servers must be one or more IP addresses, separated by spaces!'
        return

      if not ntpservers or ntpservers.translate(None, 'abcdefghijklmnopqrstuvwxyz01234567890.- ') != '':
        print 'Content-Type: text/html'
        print
        print 'NTP servers must be one or more DNS names or IP addresses, separated by spaces!'
        return

      cur.execute('INSERT INTO subnets SET spaceid=%s,subnet=%s,netmask=%s,router=%s,nameservers=%s,ntpservers=%s',
                  (spaceID, subnet, netmask, router, nameservers, ntpservers))

      print 'Status: 302 Found ' + str(inspect.currentframe().f_lineno)
      print 'Location: https://viab.gridpp.ac.uk' + requestURI
      print
      return

  except:
    pass
          
  try:
    if cgiForm['action'].value == 'deletesubnets' and cgiForm['deletelist'].value:
         
      deleteList = cgiForm.getlist('deletelist')

      for deleteSubnet in deleteList:              
        cur.execute('DELETE FROM subnets WHERE spaceid=%s AND subnetid=%s',
                    [ spaceID, deleteSubnet] )
     
      deleteOrphans()

      print 'Status: 302 Found ' + str(inspect.currentframe().f_lineno)
      print 'Location: https://viab.gridpp.ac.uk' + requestURI
      print
      return

  except:
    pass
    
  try:
    if cgiForm['action'].value == 'addfactory' and cgiForm['factoryname'].value and cgiForm['ip'] and cgiForm['mac']:
         
      factoryName = cgiForm['factoryname'].value.strip()
      if factoryName.translate(None, 'abcdefghijklmnopqrstuvwxyz01234567890.-') != '':
        print 'Content-Type: text/html'
        print
        print 'Host names are limited to lowercase letters numbers . -'
        return
      
      ip  = cgiForm['ip'].value.strip()
      if ip.translate(None, '01234567890.') != '' or ip.count('.') != 3:
        print 'Content-Type: text/html'
        print
        print 'IP addreses are limited to digits and .'
        return

      mac = cgiForm['mac'].value.strip().lower()
      if mac.translate(None, 'abcdef01234567890:') != '' or len(mac) != 17:
        print 'Content-Type: text/html'
        print
        print 'MAC addreses are limited to hexadecimal digits and :'
        return
      
      cur.execute('INSERT INTO factories SET siteid=%s,spaceid=%s,factoryname=%s,ip=%s,mac=%s,' + 
                  'mb_per_cpu=%s,udp_timeout_seconds=%s,' +
                  'cpu_per_machine=%s,hs06_per_cpu=%s,' +
                  'updated=NOW()',
                  ( siteID, spaceID, factoryName, ip, mac,
                    int(cgiForm['mb_per_cpu'].value), float(cgiForm['udp_timeout_seconds'].value),
                    int(cgiForm['cpu_per_machine'].value), float(cgiForm['hs06_per_cpu'].value)
                  ) 
                 )

      print 'Status: 302 Found ' + str(inspect.currentframe().f_lineno)
      print 'Location: https://viab.gridpp.ac.uk' + requestURI
      print
      return

  except:
    pass

  if 'action' in cgiForm and cgiForm['action'].value == 'addfactories':
    try:
      factories = cgiForm['factories'].value.split('\n')
    except:
      factories = None

    if not factories:
      errorPage(requestURI, userDN, 'No factories given', 'You need to list some factories in the text box!')
      return

    try:
      mb_per_cpu          = int(cgiForm['mb_per_cpu'].value)
      udp_timeout_seconds = float(cgiForm['udp_timeout_seconds'].value)
      cpu_per_machine     = int(cgiForm['cpu_per_machine'].value)
      hs06_per_cpu        = float(cgiForm['hs06_per_cpu'].value)
    except:
      errorPage(requestURI, userDN, 'Missing value(s)', 'You need to give a value for each of the factory parameters!')
      return
      
    sqlTriplets = []
      
    for factoryLine in factories:

      if factoryLine.strip() == '':
        continue
        
      try:    
        (mac, factoryName, ip) = factoryLine.lower().strip().split()
      except:
        errorPage(requestURI, userDN, 'Bad factory line', 'This line is not properly formatted: &quot;' + factoryLine + '&quot;')
        return
        
      if mac.translate(None, 'abcdef01234567890:') != '' or len(mac) != 17:
          errorPage(requestURI, userDN, 'Bad factory MAC address', 'The MAC address is in the wrong format in &quot;' + factoryLine + '&quot;')
          return

      if factoryName.translate(None, 'abcdefghijklmnopqrstuvwxyz01234567890.-') != '':
          errorPage(requestURI, userDN, 'Bad factory hostname', 'The hostname is in the wrong format in &quot;' + factoryLine + '&quot;')
          return

      if ip.translate(None, '01234567890.') != '' or ip.count('.') != 3:
          errorPage(requestURI, userDN, 'Bad IP address', 'The IP address is in the wrong format in &quot;' + factoryLine + '&quot;')
          return

      sqlTriplets.append('mac="%s",factoryname="%s",ip="%s"' % (mac, factoryName, ip))
      

    if len(sqlTriplets) == 0:
      errorPage(requestURI, userDN, 'No factories given', 'You need to list some factories in the text box!')
      return

    outcomes = ''

    for sqlTriplet in sqlTriplets:
      try:
        cur.execute('INSERT INTO factories SET siteid=%s,spaceid=%s,' +
                    sqlTriplet +
                    ',mb_per_cpu=%s,udp_timeout_seconds=%s,' +
                    'cpu_per_machine=%s,hs06_per_cpu=%s,' +
                    'updated=NOW()',
                    ( siteID, spaceID, 
                      mb_per_cpu, udp_timeout_seconds,
                      cpu_per_machine, hs06_per_cpu
                    ))
      except MySQLdb.IntegrityError:
        outcomes += 'Failed to add ' + sqlTriplet + ' due to duplicates<br>\n'
      except :
        outcomes += 'Failed to add ' + sqlTriplet + ' (not a duplication problem)<br>\n'
    
    if outcomes:
      errorPage(requestURI, userDN, 'Problem(s) adding new factories', 'The following problem(s) were encountered and these factories were not added:<p>' + outcomes)
      return
            
    print 'Status: 302 Found ' + str(inspect.currentframe().f_lineno)
    print 'Location: https://viab.gridpp.ac.uk' + requestURI
    print
    return

  try:
    if cgiForm['action'].value == 'addmachinetype' and cgiForm['machinetypename'].value:
         
      machinetypeName = cgiForm['machinetypename'].value.strip()

      if machinetypeName.translate(None, 'abcdefghijklmnopqrstuvwxyz01234567890.-') != '':
        print 'Content-Type: text/html'
        print
        print 'machinetype names are limited to lowercase letters numbers -'
        return

      # Exclude any reserved /etc/vac.d/*.conf filenames here
      if machinetypeName == 'settings':
        print 'Content-Type: text/html'
        print
        print 'machinetypes cannot be called settings'
        return
      
      cur.execute('INSERT INTO machinetypes SET spaceid=%s,machinetypename=%s', (spaceID, machinetypeName))
      print 'Status: 302 Found ' + str(inspect.currentframe().f_lineno)
      print 'Location: https://viab.gridpp.ac.uk' + requestURI
      print
      return

  except:
    pass
          
  try:
    if cgiForm['action'].value == 'Delete factories' and cgiForm['actionlist']:
         
      deleteList = cgiForm.getlist('actionlist')

      for deleteFactory in deleteList:
        cur.execute('DELETE FROM factories WHERE spaceid=%s AND factoryid=%s', ( spaceID, deleteFactory ) )
        
      print 'Status: 302 Found ' + str(inspect.currentframe().f_lineno)
      print 'Location: https://viab.gridpp.ac.uk' + requestURI
      print
      return

  except:
    pass
         
  try:
    if (cgiForm['action'].value == 'Start draining' or cgiForm['action'].value == 'Cancel draining') and cgiForm['actionlist']:
         
      actionList = cgiForm.getlist('actionlist')

      for actionFactory in actionList:
        cur.execute('UPDATE factories SET draining=%s WHERE spaceid=%s AND factoryid=%s',
                    (1 if cgiForm['action'].value == 'Start draining' else 0, spaceID, actionFactory ) )
     
      print 'Status: 302 Found ' + str(inspect.currentframe().f_lineno)
      print 'Location: https://viab.gridpp.ac.uk' + requestURI
      print
      return

  except:
    pass
         
  try:
    if cgiForm['action'].value.startswith('Move to ') and cgiForm['actionlist']:
         
      actionList = cgiForm.getlist('actionlist')

      for actionFactory in actionList:
        cur.execute('UPDATE factories SET spaceid=(SELECT spaceid FROM spaces WHERE spacename=%s) WHERE spaceid=%s AND factoryid=%s',
                    (cgiForm['action'].value[8:], spaceID, actionFactory ) )
     
      print 'Status: 302 Found ' + str(inspect.currentframe().f_lineno)
      print 'Location: https://viab.gridpp.ac.uk' + requestURI
      print
      return

  except:
    pass
         
  try:
    if cgiForm['action'].value == 'deletemachinetypes' and cgiForm['deletelist']:
         
      deleteList = cgiForm.getlist('deletelist')

      for deletemachinetype in deleteList:
        cur.execute('DELETE FROM machinetypes WHERE spaceid=%s AND machinetypeid=%s', ( spaceID, int(deletemachinetype) ) )
        
      deleteOrphans()
     
      print 'Status: 302 Found ' + str(inspect.currentframe().f_lineno)
      print 'Location: https://viab.gridpp.ac.uk' + requestURI
      print
      return

  except:
    pass
         
  htmlHeader('Space ' + spaceName)
  cur.execute('SELECT factoryid,factoryname,ip,mac,cpu_per_machine,hs06_per_cpu,running_cpus,total_cpus,os_issue,factoryversions.vac_version,UNIX_TIMESTAMP(factoryversions.boot_time) AS boot_time,UNIX_TIMESTAMP(time_received) AS time_received,draining FROM factories LEFT JOIN factoryversions ON factory=factoryname AND space=%s AND site=%s WHERE spaceid=%s ORDER BY factoryname', [spaceName, siteName, spaceID])
  rows = cur.fetchall()

  print ('<div class="breadcrumbs"><a href="/dashboard/">Dashboard</a> / ' + 
         '<a href="/dashboard/' + siteName + '/">' + siteName + '</a> ' +
         '/ ' + spaceName + '</div>')

  print '<h1>Space&nbsp;' + spaceName + '</h1>'

  print '<form method="post" action="' + requestURI + '">'

  if published:
    print '<p>The configuration RPM for space ' + spaceName + ' was published on ' + str(published) + '. ' 
  else:
    print '<p>The configuration RPM for space ' + spaceName + ' has not been published yet. '

  print '<input type="hidden" name="action" value="publish">'

  htmlFormCookie(userDN)
  print '<input type="submit" value="Publish configuration RPM">'
  print '</form>'

  if published:
    print '<p>If you need to (re)install this space from scratch, boot the first factory using the '
    print '<a href="/iso/' + siteName + '/' + spaceName + '/viab-usb.iso">USB .iso image</a>.'
  else:
    print '<p>Once the RPM has been publihsed, you will be able to download the USB .iso boot image.'
  
  # Change version paragraph

  print '<form method="post" action="' + requestURI + '">'

  print '<input type="hidden" name="action" value="changeversion">'

  print '<p>Vac-in-a-Box version ' + spaceVersion + ' will be installed on factories in this space, '
  if prodVersion == spaceVersion:
    print ' which is the recommended production version. '
  else:
    print ' <b>but the recommended production version is now ' + prodVersion + '.</b> '

  print ' A reboot will normally be required when upgrading between Vac major versions. ' 

  print '<br><select name="version">\n'
  
  versionsList = os.listdir('/var/lib/viab/etc')
  versionsList.sort()

  for v in versionsList:
    if not 'pre' in v or userDN in viab_cgi_conf.adminDNs:
    
      try:
        vv = open('/var/lib/viab/etc/' + v + '/VAC_MAJOR_MINOR', 'r').read().strip()
      except:
        vv = '???'
        
      print '<option value="' + v + '" ' + ('selected' if v == spaceVersion else '') + '>Version ' + v + ' (Vac ' + vv + ')</option>\n'

  print '</select>\n'

  htmlFormCookie(userDN)
  print '<input type="submit" value="Change Vac-in-a-Box version">'
  print '</form>'

  print '<h2>Factories in this space</h2>'

  if len(rows) > 0:
    print '<form method="post" action="' + requestURI + '">'
    
    print '<table class="center">'
    print '<tr><th class="oddeven">Host</th><th class="oddeven">IP</th><th class="oddeven">ViaB/Vac</th><th class="oddeven">Booted</th><th class="oddeven">Heartbeat</th><th class="oddeven">cpu&nbsp;/<br>machine</th><th class="oddeven">HS06<br>/&nbsp;cpu</th>'
    print '<th class="oddeven">Running<br>cpu</th><th class="oddeven">&nbsp;</th><th class="oddeven"><input type="checkbox" onchange="for (var i = 0; i < this.form.length; ++i) { if (this.form[i].type == \'checkbox\') { form[i].checked = this.checked; } }"></th></tr>'

    cur.execute('SELECT spacename,spaceid FROM spaces WHERE siteid=%s ORDER BY spacename', siteID)
    spaceRows = cur.fetchall()

    n=0    
    for row in rows:
      if row['time_received'] < int(time.time() - 86400):
        heartbeatClass = 'alarm'
      elif row['time_received'] < int(time.time() - 3659):
        heartbeatClass = 'warning'
      else:
        heartbeatClass = oddEven(n)
      
      try:
        viab_version = re.search('\(ViaB ([^)]*)\)', row['os_issue']).group(1)
      except:
        viab_version = '???'
    
      try:
        vac_version = row['vac_version'].split()[1]
      except:
        vac_version = '???'

      print ('<tr><td class="' + oddEven(n) + '" style="white-space: nowrap"><a href="/dashboard/' + siteName + '/' + spaceName + '/factories/' + row['factoryname'] + '/">' + row['factoryname'].split('.')[0] + '</a></td>' +
           '<td class="' + oddEven(n) + '">' + row['ip'] + '</td>' +
           '<td class="' + oddEven(n) + '">' + viab_version + ' / ' + vac_version + '</td>' +
           '<td class="' + oddEven(n) + '">' + secondsToString(row['boot_time']) + '</td>' +
           '<td class="' + heartbeatClass + '">' + secondsToString(row['time_received']) + '</td>' +           
           '<td class="' + oddEven(n) + '">' + str(row['cpu_per_machine']) + '</td>' +
           '<td class="' + oddEven(n) + '">' + str(row['hs06_per_cpu']) + '</td>' +
           '<td class="' + oddEven(n) + '">' + str(row['running_cpus']) + '/' + str(row['total_cpus']) + '</td>' +
           '<td class="' + oddEven(n) + '">' + ('Draining' if row['draining'] == 1 else '') + '</td>' +
           '<td class="' + oddEven(n) + '"><input type="checkbox" name="actionlist" value="' + str(row['factoryid']) + '"></td>' +
           '</tr>\n') 
      n += 1
                
    print '<tr><td colspan="10">'
    print '<select name="actionselect" onchange="document.getElementById(\'actionsubmit\').value=this.value; document.getElementById(\'actionsubmit\').disabled=false;">'
    print '<option selected disabled>Choose action to apply</option>'
    print '<option value="Start draining">Start draining</option>'
    print '<option value="Cancel draining">Cancel draining</option>'
  
    for oneSpaceRow in spaceRows:
      if oneSpaceRow['spacename'] != spaceName:
        print '<option value="Move to ' + oneSpaceRow['spacename'] + '">Move to ' + oneSpaceRow['spacename'] + '</option>'

    print '<option value="Delete factories">Delete factories</option>'
    print '</select> &nbsp; '

    print 'Apply to selected factories: <input type="submit" disabled name="action" id="actionsubmit" value="pick action first">'
  
    print '</td></tr>'
    print '</table>'

    htmlFormCookie(userDN)
    print '</form>'

  # Add a factory, possibly with defaults from last factory updated

  print '<h3>Add a factory</h3>'

  print '<p>This form is pre-populated with the details of the most recently updated existing factory.'
  
  print '<form method="post" action="' + requestURI + '">'
  print '<table>'
  print '<tr><td>Hostname:</td><td><input type="text" name="factoryname"></td><tr>'
  print '<tr><td>IP:</td><td><input type="text" name="ip"></td></tr>'
  print '<tr><td>MAC:</td><td><input type="text" name="mac"></td></tr>'

  cur.execute('SELECT mb_per_cpu,udp_timeout_seconds,cpu_per_machine,hs06_per_cpu FROM factories WHERE spaceID=%s ORDER BY updated DESC LIMIT 1', 
              spaceID)
  
  try:
    row = cur.fetchall()[0]
  except:
    row = { 'mb_per_cpu'      : 2048,
            'udp_timeout_seconds' : 5.0,
            'cpu_per_machine'     : 1,
            'hs06_per_cpu'	  : 10.0}

  print '<tr><td>mb_per_cpu:</td><td><input type="text" name="mb_per_cpu" value="' + str(row['mb_per_cpu']) + '"></td></tr>'
  print '<tr><td>udp_timeout_seconds:</td><td><input type="text" name="udp_timeout_seconds" value="' + str(row['udp_timeout_seconds']) + '"></td></tr>'
  print '<tr><td>cpu_per_machine:</td><td><input type="text" name="cpu_per_machine" value="' + str(row['cpu_per_machine']) + '"></td></tr>'
  print '<tr><td>hs06_per_cpu:</td><td><input type="text" name="hs06_per_cpu" value="' + str(row['hs06_per_cpu']) + '"></td></tr>'

  print '<tr><td colspan="2" style="text-align: center"><input type="submit" value="Add factory"></td><tr>'
  htmlFormCookie(userDN)
  print '<input type="hidden" name="action" value="addfactory">'
  print '</table>'
  print '</form>'

  # Bulk add factories

  print '<h3>Bulk add factories</h3>'
  print '<p>You can add multiple factories by copying and pasting their details into this box. One line per factory, each with three values separated by spaces: MAC address then fully qualified hostname then IP address.'
  
  print '<form method="post" action="' + requestURI + '">'

  print '<table>'
  print '<tr><td colspan=2><textarea name="factories" rows="4" cols="80"></textarea></td></tr>'

  print '<tr><td>mb_per_cpu:</td><td><input type="text" name="mb_per_cpu" value="' + str(row['mb_per_cpu']) + '"></td></tr>'
  print '<tr><td>udp_timeout_seconds:</td><td><input type="text" name="udp_timeout_seconds" value="' + str(row['udp_timeout_seconds']) + '"></td></tr>'
  print '<tr><td>cpu_per_machine:</td><td><input type="text" name="cpu_per_machine" value="' + str(row['cpu_per_machine']) + '"></td></tr>'
  print '<tr><td>hs06_per_cpu:</td><td><input type="text" name="hs06_per_cpu" value="' + str(row['hs06_per_cpu']) + '"></td></tr>'

  print '<tr><td colspan="2" style="text-align: center"><input type="submit" value="Add factories"></td></tr>'
  print '</table>'

  htmlFormCookie(userDN)
  print '<input type="hidden" name="action" value="addfactories">'
  print '</form>'

  cur.execute('SELECT machinetypename,machinetypes.machinetypeid,value AS target_share FROM machinetypes LEFT JOIN machinetypeopts ON machinetypes.machinetypeid=machinetypeopts.machinetypeid AND optname="target_share" WHERE spaceid=%s ORDER BY machinetypename', spaceID)
  
  rows = cur.fetchall()

  print '<h2>Machinetypes in this space</h2>'

  if len(rows) > 0:
    print '<form method="post" action="' + requestURI + '"><input type="hidden" name="action" value="deletemachinetypes">'

    print '<table class="center">'
    print '<tr><th class="oddeven">machinetype name</th><th class="oddeven">Target&nbsp;share</th>'
    print '<th class="oddeven"><input type="checkbox" onchange="for (var i = 0; i < this.form.length; ++i) { if (this.form[i].type == \'checkbox\') { form[i].checked = this.checked; } }"></th></tr>'

    n=0    
    for row in rows:
      try:
        targetShare = float(row['target_share'])
      except:
        targetShare = 0.0

      print ('<tr><td class="' + oddEven(n) + '"><a href="/dashboard/' + siteName + '/' + spaceName + '/machinetypes/' + row['machinetypename'] + '/">' + row['machinetypename'] + '</a></td>' +
             '<td class="' + oddEven(n) + '">' + str(targetShare) + '</td>' +
             '<td class="' + oddEven(n) + '"><input type="checkbox" name="deletelist" value="' + str(row['machinetypeid']) + '"></td>' +
             '</tr>\n') 
      n += 1

    print '<tr><td colspan="6" style="text-align: center"><input type="submit" value="Delete selected machinetypes"></td></tr>'
    print '</table>'

    htmlFormCookie(userDN)
    print '</form>'

  print '<h3>Add a machinetype</h3>'
  
  print '<form method="post" action="' + requestURI + '">'
  print 'New machinetype name: <input type="text" name="machinetypename">'
  htmlFormCookie(userDN)
  print '<input type="submit" value="Add machinetype">'
  print '<input type="hidden" name="action" value="addmachinetype">'
  print '</form>'

  # Subnets for this space

  cur.execute('SELECT subnetid,subnet,netmask,router,nameservers,ntpservers FROM subnets WHERE spaceid=%s', spaceID)
  rows = cur.fetchall()

  print '<h2>Subnets</h2>'
  
  print '<p>These subnets are used when a factory installs and boots up, and so changes will not take effect without a reboot. '

  if len(rows):
    print '<form method="post" action="' + requestURI + '"><input type="hidden" name="action" value="deletesubnets">'
    print '<table>'
    print '<tr><th class="oddeven">Subnet</th><th class="oddeven">Netmask</th>'
    print '<th class="oddeven">Router</th><th class="oddeven">Name&nbsp;servers</th><th class="oddeven">NTP&nbsp;servers</th><th class="oddeven">&nbsp;</th></tr>'
    
    n = 0
    for row in rows:
      print ('<tr><td class="' + oddEven(n)+ '">' + row['subnet'] + '</td>' +
           '<td class="' + oddEven(n)+ '">' + row['netmask'] + '</td>' +
           '<td class="' + oddEven(n)+ '">' + str(row['router']) + '</td>' +
           '<td class="' + oddEven(n)+ '">' + str(row['nameservers']) + '</td>' +
           '<td class="' + oddEven(n)+ '">' + str(row['ntpservers']) + '</td>' +
           '<td class="' + oddEven(n)+ '"><input type="checkbox" name="deletelist" value="' + str(row['subnetid']) + '"></td>' +
           '</tr>')
      n += 1
                
    print '<tr><td colspan="6" style="text-align: center"><input type="submit" value="Delete selected subnets"></td></tr>'
    print '</table>'

    htmlFormCookie(userDN)
    print '</form>'
  
  print '<h3>Add a subnet</h3>'

  print '<form method="post" action="' + requestURI + '">'
  print '<table>'
  print '<tr><td>Subnet:</td><td><input type="text" name="subnet"></td><td>Four part subnet IP address, eg 192.168.1.0</td></tr>'
  print '<tr><td>Netmask:</td><td><input type="text" name="netmask"></td><td>eg 255.255.255.0 for class C subnet</td></tr>'
  print '<tr><td>Router:</td><td><input type="text" name="router"></td><td>IP address of router</td></tr>'
  print '<tr><td>Name servers:</td><td><input type="text" name="nameservers" maxlen="255" value="8.8.8.8 8.8.4.4"></td><td>One or more IP addresses, separated by spaces</td></tr>'
  print '<tr><td>NTP servers:</td><td><input type="text" name="ntpservers" maxlen="255" value="europe.pool.ntp.org"></td><td>One or more DNS names or IP addresses, separated by spaces</td></tr>'
  print '</table>' 
  print '<input type="submit" value="Add subnet">'
  htmlFormCookie(userDN)
  print '<input type="hidden" name="action" value="addsubnet">'
  print '</form>'

  htmlFooter(userDN)

def oneSite(requestURI, userDN, cgiForm, siteName, siteID):

  global cur
  
  try:
    if cgiForm.getfirst('action') == 'uploadp12':

      cur.execute('UPDATE sites SET apelp12=%s,apelp12updated=NOW() WHERE siteid=%s', (cgiForm.getfirst('p12file'), siteID) )

      print 'Status: 302 Found ' + str(inspect.currentframe().f_lineno)
      print 'Location: https://viab.gridpp.ac.uk' + requestURI
      print
      return
  except:
    pass

  try:
    if cgiForm['action'].value == 'addsshkey' and cgiForm['keyvalue'].value:
         
      keyValueSplit = cgiForm['keyvalue'].value.split()

      if keyValueSplit[0] == 'ssh-rsa':
        keyType  = 'ssh-rsa'
        keyValue = keyValueSplit[1]
      elif keyValueSplit[0] == 'ssh-dss':
        keyType  = 'ssh-dss'
        keyValue = keyValueSplit[1]
      else:
        keyType  = 'ssh-rsa'
        keyValue = keyValueSplit[0]
      
      try:
        comment = cgiForm['comment'].value.strip()
      except:
        comment = ''

      cur.execute('INSERT INTO sshkeys SET siteid=%s,keyvalue=%s,keytype=%s,comment=%s,added=NOW()', (siteID, keyValue, keyType, comment))
      print 'Status: 302 Found ' + str(inspect.currentframe().f_lineno)
      print 'Location: https://viab.gridpp.ac.uk' + requestURI
      print
      return

  except:
    pass

  try:
    if cgiForm['action'].value == 'deletekeys' and cgiForm['deletelist'].value:
         
      deleteList = cgiForm.getlist('deletelist')

      for deleteKey in deleteList:              
        cur.execute('DELETE FROM sshkeys WHERE siteid=' + str(siteID) + ' AND keyid=' + str(deleteKey))
     
      print 'Status: 302 Found ' + str(inspect.currentframe().f_lineno)
      print 'Location: https://viab.gridpp.ac.uk' + requestURI
      print
      return

  except:
    pass
    
  try:
    if cgiForm['action'].value == 'addsshrule' and cgiForm['ip'].value and cgiForm['netmask'].value:
         
      ip = cgiForm['ip'].value.strip()
      if not ip or ip.translate(None, '01234567890.') != '':
        print 'Content-Type: text/html'
        print
        print 'IP address must only be digits and periods (&quot;.&quot;)!'
        return

      netmask = cgiForm['netmask'].value.strip()
      if not netmask or netmask.translate(None, '01234567890.') != '':
        print 'Content-Type: text/html'
        print
        print 'Netmask must only be digits and periods (&quot;.&quot;)!'
        return

      try:
        comment = cgiForm['comment'].value.strip()
      except:
        comment = ''

      cur.execute('INSERT INTO sshrules SET siteid=%s,ip=%s,netmask=%s,comment=%s', (siteID, ip, netmask, comment))
      print 'Status: 302 Found ' + str(inspect.currentframe().f_lineno)
      print 'Location: https://viab.gridpp.ac.uk' + requestURI
      print
      return

  except:
    pass
          
  try:
    if cgiForm['action'].value == 'deletesshrules' and cgiForm['deletelist'].value:
         
      deleteList = cgiForm.getlist('deletelist')

      for deleteRuleID in deleteList:
        cur.execute('DELETE FROM sshrules WHERE siteid=%s AND ruleid=%s', (siteID, deleteRuleID))
     
      print 'Status: 302 Found ' + str(inspect.currentframe().f_lineno)
      print 'Location: https://viab.gridpp.ac.uk' + requestURI
      print
      return

  except:
    pass
    
  try:
    if cgiForm['action'].value == 'addx509dn' and cgiForm['dn'].value:
         
      dn = cgiForm['dn'].value.strip()

      # Try to add new site admin entry, created from Dashboard
      cur.execute('INSERT IGNORE siteadmins SET siteid=%s,dn=%s,added=NOW(),source="Dashboard"', (siteID, dn))

      # In case already there from GOCDB: promote to Dashboard as source
      cur.execute('UPDATE siteadmins SET source="Dashboard" WHERE siteid=%s AND dn=%s', (siteID, dn))

      print 'Status: 302 Found ' + str(inspect.currentframe().f_lineno)
      print 'Location: https://viab.gridpp.ac.uk' + requestURI
      print
      return

  except:
    pass
          
  try:
    if cgiForm['action'].value == 'deletex509dns' and cgiForm['deletelist'].value:
         
      deleteList = cgiForm.getlist('deletelist')

      for deleteDN in deleteList:              
        cur.execute('DELETE FROM siteadmins WHERE siteid=%s AND dn=%s', (siteID, deleteDN))
     
      print 'Status: 302 Found ' + str(inspect.currentframe().f_lineno)
      print 'Location: https://viab.gridpp.ac.uk' + requestURI
      print
      return

  except:
    pass
    
  try:
    if cgiForm['action'].value == 'deletespaces' and cgiForm['deletelist'].value:

      deleteList = cgiForm.getlist('deletelist')

      for deleteSpaceID in deleteList:
        cur.execute('DELETE FROM spaces WHERE siteid=%s AND spaceid=%s', (siteID, deleteSpaceID))
     
      deleteOrphans()
     
      print 'Status: 302 Found ' + str(inspect.currentframe().f_lineno)
      print 'Location: https://viab.gridpp.ac.uk' + requestURI
      print
      return

  except:
    pass
    
  try:
    if cgiForm['action'].value == 'addspace' and cgiForm['spacename'].value:
         
      spaceName = cgiForm['spacename'].value

      if spaceName.translate(None, 'abcdefghijklmnopqrstuvwxyz01234567890.-') != '':
        print 'Content-Type: text/html'
        print
        print 'Space names are limited to lowercase letters numbers . -'
        return
      
      cur.execute('INSERT INTO spaces SET siteid=%s,spacename=%s,version=%s,cookie=SHA1(RAND())', (siteID, spaceName, prodVersion))
      print 'Status: 302 Found ' + str(inspect.currentframe().f_lineno)
      print 'Location: https://viab.gridpp.ac.uk' + requestURI
      print
      return

  except:
    pass

  htmlHeader('Site ' + siteName)
  
  cur.execute('SELECT spacename,published,version,spaceid FROM spaces WHERE siteid=%s ORDER BY spacename', siteID)
  
  rows = cur.fetchall()

  print ('<div class="breadcrumbs"><a href="/dashboard/">Dashboard</a> / ' + siteName + '</div>')

  print '<h1>Site ' + siteName + '</h1>'
  
  print '<form method="post" action="https://goc.egi.eu/portal/index.php?Page_Type=Search"><input type="hidden" name="SearchString" value="%s">' % siteName
  print 'Lookup %s in <input type="submit" value="GOCDB"></form>' % siteName

  print '<h2>Spaces</h2>'

  if len(rows) > 0:
    print '<form method="post" action="' + requestURI + '">'

    print '<table class="center">'
    print '<tr><th class="oddeven">Space</th><th class="oddeven">Version</th><th class="oddeven">USB .iso</th><th class="oddeven">RPM published</th>'
    print '<th class="oddeven"><input type="checkbox" onchange="for (var i = 0; i < this.form.length; ++i) { if (this.form[i].type == \'checkbox\') { form[i].checked = this.checked; } }"></th></tr>'
  
    n=0    
    for row in rows:
      print '<tr><td class="' + oddEven(n) + '"><a href="/dashboard/' + siteName + '/' + row['spacename'] + '/">' + row['spacename'] + '</a></td>'
      print '<td class="' + oddEven(n) + '" style="text-align: center">' + row['version'] + '</td>'

      if row['published'] is None:
        print '<td class="' + oddEven(n) + '" style="text-align: center"> - </td>' 
        print '<td class="' + oddEven(n) + '" style="text-align: center">Never</td>\n'
      else:
        print '<td class="' + oddEven(n) + '"><a href="/iso/' + siteName + '/' + row['spacename'] + '/viab-usb.iso">Download</a></td>' 
        print '<td class="' + oddEven(n) + '">' + str(row['published']) + '</td>\n'
    
      print '<td class="' + oddEven(n) + '"><input type="checkbox" name="deletelist" value="' + str(row['spaceid']) + '"></td></tr>'
      n += 1 

    print '<tr><td colspan="5" style="text-align: center"><input type="submit" value="Delete selected spaces"><input type="hidden" name="action" value="deletespaces"></td></tr>'

    htmlFormCookie(userDN)
    print '</form>'

    print '</table>'

  print '<h3>Add a space</h3>'  
  print '<p>Space names should be in the DNS namespace controlled by the site, but they do not need to be registered in its name servers.'
  print '<form method="post" action="' + requestURI + '">'
  print '<input type="text" name="spacename">'
  print '<input type="submit" value="Add space">'
  htmlFormCookie(userDN)
  print '<input type="hidden" name="action" value="addspace">'
  print '</form>'

  cur.execute('SELECT keyid,keyvalue,keytype,comment,added FROM sshkeys WHERE siteid=%s', siteID)
  rows = cur.fetchall()
   
  print '<h2>SSH keys</h2>'
  
  if len(rows) > 0:
    print '<form method="post" action="' + requestURI + '"><input type="hidden" name="action" value="deletekeys">'
    print '<table class="center">'
    print '<tr><th class="oddeven">Key</th><th class="oddeven">Type</th><th class="oddeven" colspan="2">Comment</th></tr>'

    n = 0    
    for row in rows:
      print ('<tr><td class="' + oddEven(n) + '">' + ' '.join(textwrap.wrap(row['keyvalue'],40)) + '</td>' +
             '<td class="' + oddEven(n) + '">' + row['keytype'] + '</td>' +
             '<td class="' + oddEven(n) + '">' + row['comment'] + '</td>' +
             '<td class="' + oddEven(n) + '"><input type="checkbox" name="deletelist" value="' + str(row['keyid']) + '"></td>' +
             '</tr>')
                
    print '</table>'

    htmlFormCookie(userDN)
    print '<input type="submit" value="Delete selected keys">'
    print '</form>'

  print '<h3>Add an RSA ssh key</h3>'
  print '<p>The ssh keys will be installed on Vac factory machines to allow ssh access as root'
  print '<form method="post" action="' + requestURI + '">'
  print 'Key: <input type="text" name="keyvalue"> '
  print 'Comment: <input type="text" name="comment"> '
  print '<input type="submit" value="Add ssh key">'
  htmlFormCookie(userDN)
  print '<input type="hidden" name="action" value="addsshkey">'
  print '</form>'

  cur.execute('SELECT ruleid,ip,netmask,siteid,comment FROM sshrules WHERE siteid=%s', siteID)
  rows = cur.fetchall()
   
  print '<h2>SSH firewall rules</h2>'
  print '<p>You can ssh to factories from the IP addresses and subnets listed here. Ssh is blocked from other addresses. If you lock yourself out, you should be able to update the rules here, republish the RPM for the spaces involved, and wait for the next autoupdate.'
 
  if len(rows) > 0:
    print '<form method="post" action="' + requestURI + '"><input type="hidden" name="action" value="deletesshrules">'
    print '<table class="center">'
    print '<tr><th class="oddeven">IP</th><th class="oddeven">Netmask</th><th class="oddeven" colspan="2">Comment</th></tr>'

    n = 0    
    for row in rows:
      print ('<tr><td class="' + oddEven(n) + '">' + row['ip'] + '</td>' +
             '<td class="' + oddEven(n) + '">' + row['netmask'] + '</td>' +
             '<td class="' + oddEven(n) + '">' + row['comment'] + '</td>' +
             '<td class="' + oddEven(n) + '"><input type="checkbox" name="deletelist" value="' + str(row['ruleid']) + '"></td>' +
             '</tr>')
                
    print '<tr><td colspan="4" style="text-align: center"><input type="submit" value="Delete selected rules"></td></tr>'
    print '</table>'

    htmlFormCookie(userDN)
    print '</form>'

  print '<h3>Add an ssh firewall rule</h3>'
  print '<form method="post" action="' + requestURI + '">'
  print 'IP: <input type="text" name="ip"> '
  print 'Netmask: <input type="text" name="netmask" value="255.255.255.255"> '
  print 'Comment: <input type="text" name="comment"> '
  print '<input type="submit" value="Add ssh rule">'
  htmlFormCookie(userDN)
  print '<input type="hidden" name="action" value="addsshrule">'
  print '</form>'

  print '<h2>APEL certificate/key .p12 file</h2>'

  print '<p>Uploading a valid cert/key will cause APEL accounting reports to be sent. '
  print 'The sitename ' + siteName + ' will be used when reporting to APEL. '

  cur.execute('SELECT LENGTH(apelp12) AS apelp12len,apelp12,apelp12updated FROM sites WHERE siteid=%s', siteID)
  rows = cur.fetchall()
  print '<p>.p12 file ' + str(rows[0]['apelp12len']) + ' bytes, updated ' + str(rows[0]['apelp12updated'])

  print '<h3>Upload .p12 file</h3>'
  
  print '<form method="post" action="' + requestURI + '" enctype="multipart/form-data">'
  print '<input type="file" name="p12file">'
  htmlFormCookie(userDN)
  print '<br><input type="submit" value="Upload .p12 file"> <input type="hidden" name="action" value="uploadp12">'  
  print '</form>'

  # Admin DNs

  cur.execute('SELECT dn,added,source FROM siteadmins WHERE siteid=%s', siteID)
  rows = cur.fetchall()

  print '<h2>Site Admins</h2>'
  print '<p>People with Vac-in-a-Box website admin rights are also able to update the site configuration.'

  if len(rows) > 0:
  
    if userDN in viab_cgi_conf.adminDNs:
      print '<form method="post" action="' + requestURI + '"><input type="hidden" name="action" value="deletex509dns">'

    print '<table>'
    print '<tr><th class="oddeven">X.509 DN</th><th class="oddeven">Added</th><th class="oddeven">Source</th>'

    if userDN in viab_cgi_conf.adminDNs:
      print '<th class="oddeven">&nbsp;</th>'
  
    print '</tr>'
    
    n = 0
    for row in rows:
      print ('<tr><td class="' + oddEven(n)+ '">' + row['dn'] + '</td>' +
             '<td class="' + oddEven(n)+ '">' + str(row['added']) + '</td>' +
             '<td class="' + oddEven(n)+ '">' + str(row['source']) + '</td>')

      if userDN in viab_cgi_conf.adminDNs:
        print '<td class="' + oddEven(n)+ '"><input type="checkbox" name="deletelist" value="' + str(row['dn']) + '"></td>'

      print '</tr>'
      n += 1
                
    print '</table>'

    if userDN in viab_cgi_conf.adminDNs:
      htmlFormCookie(userDN)
      print '<input type="submit" value="Delete selected DNs">'
      print '</form>'
  
  if userDN in viab_cgi_conf.adminDNs:
    print '<h3 class="admin">Add a site admin X.509 DN</h3>'

    print '<form method="post" action="' + requestURI + '">'
    print 'X.509 DN:<input type="text" name="dn">'
    print '<input type="submit" value="Add X.509 DN">'
    htmlFormCookie(userDN)
    print '<input type="hidden" name="action" value="addx509dn">'
    print '</form>'

  htmlFooter(userDN)

def allSites(requestURI, userDN, cgiForm):

  global cur

  try:
    if cgiForm['action'].value == 'addsite' and cgiForm['sitename'].value:
         
      siteName = cgiForm['sitename'].value

      if siteName.translate(None, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz01234567890.-_') != '':
        print 'Content-Type: text/html'
        print
        print 'Site names are limited to letters numbers . - _'
        return
      
      cur.execute('INSERT INTO sites SET sitename=%s', siteName)
      print 'Status: 302 Found ' + str(inspect.currentframe().f_lineno)
      print 'Location: https://viab.gridpp.ac.uk' + requestURI
      print
      return

  except:
    pass
          
  htmlHeader('Vac-in-a-Box dashboard')
  
  print ('<div class="breadcrumbs">Dashboard</div>')

  print '<h1>Vac-in-a-Box dashboard</h1>'
  
  cur.execute('SELECT siteid,sitename FROM sites ORDER BY sitename')
  
  rows = cur.fetchall()

  print '<table class="center">'
  print '<tr><th class="oddeven">GOCDB Name</th></tr>'
    
  n = 0
  for row in rows:
    print '<tr><td class="' + oddEven(n) + '"><a href="/dashboard/' + row['sitename'] + '/">' + row['sitename'] + '</a></td></tr>\n'
    n += 1
                
  print '</table>'
  
  if userDN in viab_cgi_conf.adminDNs:  
    print '<h2 class="admin">Add another site</h2>'
    print '<p>WLCG/EGI sites should use their name in the <a href="https://goc.egi.eu/portal/">GOCDB</a>'
    print '<form method="post" action="' + requestURI + '">'
    htmlFormCookie(userDN)
    print 'Site GOCDB Name: '
    print '<input type="text" name="sitename">'
    print '<input type="submit" value="Add site">'
    print '<input type="hidden" name="action" value="addsite">'
    print '</form>'

  htmlFooter(userDN)
  
#
# PROGRAM MAIN
#

requestURI  = os.environ['REQUEST_URI']
viabVersion = open('/var/lib/viab/VERSION','r').readline().split('=',1)[1].strip()

try:
  prodVersion = open('/var/lib/viab/PROD_VERSION','r').readline().split('=',1)[1].strip()
except:
  prodVersion = viabVersion

try:
  userDN = os.environ['SSL_CLIENT_S_DN']
except:  
  userDN = None

if requestURI == '/':
  htmlHeader('Vac-in-a-Box')

  try:
    print open('/var/lib/viab/www/index.html', 'r').read()
  except:
    pass  

  htmlFooter(userDN)
  sys.exit(0)
    
elif requestURI[:6] == '/docs/':

  pageVersion, pageName  = requestURI.split('/')[2:4]

  if pageName == '':
    pageName  = 'index'
    pageTitle = 'Vac-in-a-Box docs'
  else:
    pageTitle = pageName.replace('_',' ').title()

  htmlHeader(pageTitle)

  try:
    print open('/var/lib/viab/www/docs/' + pageVersion + '/' + pageName + '.html', 'r').read()
  except:
    pass  

  htmlFooter(userDN)
  sys.exit(0)

# From now on, a client certificate is required

if not userDN:
  htmlHeader('Certificate required')
  print '<p>You cannot access this page without a client certificate!'
  htmlFooter(userDN)
  sys.exit(0)
  
db  = MySQLdb.connect(host="localhost", user=viab_cgi_conf.mysqlUser, passwd=viab_cgi_conf.mysqlPassword, db='viab')
cur = db.cursor(MySQLdb.cursors.DictCursor)

siteName   = None
siteID     = None
spaceName  = None
spaceID    = None
machinetypeName = None
machinetypeID   = None
factoryName   = None
factoryID     = None

uriElements = requestURI.split('/')

try: 
  siteName  = uriElements[2]
except:
  pass

if siteName:
  try:
    cur.execute('SELECT siteid FROM sites WHERE sitename=%s', siteName)
    rows = cur.fetchall()
    siteID = int(rows[0]['siteid'])
  except:
    print 'Status: 302 Found ' + str(inspect.currentframe().f_lineno)
    print 'Location: https://viab.gridpp.ac.uk/dashboard/'
    print 
    sys.exit(0)
  else:
    if userDN not in viab_cgi_conf.adminDNs:  
      try:
        cur.execute('SELECT sites.siteid FROM sites LEFT JOIN siteadmins ON sites.siteid=siteadmins.siteid WHERE dn=%s AND sites.siteid=%s', (userDN, siteID))

        rows = cur.fetchall()
        if len(rows) == 0:
          print 'Status: 403 Forbidden'
          print 'Content-Type: text/html'
          print
          print 'You are not an admin for site ' + siteName
          sys.exit(0)
                
      except:
        print 'Status: 403 Forbidden'
        print 'Content-Type: text/html'
        print
        print 'You are not listed as an admin for site ' + siteName
        sys.exit(0)
  
  try:
    spaceName = uriElements[3]
  except:
    pass

if spaceName:
  try:
    cur.execute('SELECT spaceid,published,version FROM spaces WHERE siteid=%s AND spacename=%s', (siteID, spaceName))
    rows         = cur.fetchall() 
    spaceID      = int(rows[0]['spaceid'])
    published    = rows[0]['published']
    spaceVersion = rows[0]['version']
  except:
    print 'Status: 302 Found ' + str(inspect.currentframe().f_lineno)
    print 'Location: https://viab.gridpp.ac.uk/dashboard/' + siteName + '/'
    print
    sys.exit(0)
    
  try:
    if   uriElements[4] == 'machinetypes':
      machinetypeName = uriElements[5]
    elif uriElements[4] == 'factories':
      factoryName   = uriElements[5]
  except:
    pass

if factoryName:
  try:
    cur.execute('SELECT factoryid FROM factories WHERE spaceid=%s AND factoryname=%s', (spaceID, factoryName))
    rows = cur.fetchall() 
    factoryID = int(rows[0]['factoryid'])
  except:
    print 'Status: 302 Found ' + str(inspect.currentframe().f_lineno)
    print 'Location: https://viab.gridpp.ac.uk/dashboard/' + siteName + '/' + spaceName + '/'
    print
    sys.exit(0)

if machinetypeName:
  try:
    cur.execute('SELECT machinetypeid FROM machinetypes WHERE spaceid=%s AND machinetypename=%s', (spaceID, machinetypeName))
    rows = cur.fetchall() 
    machinetypeID = int(rows[0]['machinetypeid'])
  except:
    print 'Status: 302 Found ' + str(inspect.currentframe().f_lineno)
    print 'Location: https://viab.gridpp.ac.uk/dashboard/' + siteName + '/' + spaceName + '/'
    print
    sys.exit(0)

cgiForm = cgi.FieldStorage()

# Check the form cookie

try:
  action = cgiForm.getfirst('action')
except:
  action = None

if action:
  try:
      formCookie = cgiForm.getfirst('formcookie')
      (formTime, formHash) = formCookie.split(':')
      calculatedHash = hashlib.sha256(formTime + userDN + viab_cgi_conf.formHashSalt).hexdigest()
  except:
      htmlHeader('Page expired')
      print '<p>Page expired'
      htmlFooter(userDN)
      sys.exit(0)
  
  if formHash != calculatedHash:
      htmlHeader('Page has expired')
      print '<p>Page has expired'
      htmlFooter(userDN)
      sys.exit(0)

if factoryName:
  oneFactory(requestURI, userDN, cgiForm, siteName, siteID, spaceName, spaceID, factoryName, factoryID)
elif machinetypeName:
  oneMachinetype(requestURI, userDN, cgiForm, siteName, siteID, spaceName, spaceID, machinetypeName, machinetypeID)
elif spaceName:
  oneSpace(requestURI, userDN, cgiForm, siteName, siteID, spaceName, spaceID, published, spaceVersion)
elif siteName:
  oneSite(requestURI, userDN, cgiForm, siteName, siteID)
else :
  allSites(requestURI, userDN, cgiForm)

sys.exit(0)
