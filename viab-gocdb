#!/usr/bin/python
#
#  viab-gocdb - Update ViaB database with GOCDB per-site admins
#
#  Andrew McNab, University of Manchester.
#  Copyright (c) 2013-5. All rights reserved.
#
#  Redistribution and use in source and binary forms, with or
#  without modification, are permitted provided that the following
#  conditions are met:
#
#    o Redistributions of source code must retain the above
#      copyright notice, this list of conditions and the following
#      disclaimer. 
#    o Redistributions in binary form must reproduce the above
#      copyright notice, this list of conditions and the following
#      disclaimer in the documentation and/or other materials
#      provided with the distribution. 
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
#  CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
#  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
#  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
#  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
#  TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
#  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
#  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
#  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.
#
#  Contacts: Andrew.McNab@cern.ch  http://www.gridpp.ac.uk/vac/
#

import os
import sys
import time
import MySQLdb
import xml.etree.cElementTree 
import pycurl
import StringIO

db  = None
cur = None

# viab_cgi_conf.py must define these variables:
#
# mysqlUser     = 'username'
# mysqlPassword = 'PAsSWoRd'
#

sys.path.append('/var/lib/viab/bin')
import viab_cgi_conf

def logLine(text):
  print time.strftime('%b %d %H:%M:%S : ') + text
  sys.stdout.flush()
    
#
# PROGRAM MAIN !!!
# 

# First get the site contacts XML from GOCDB

curl = pycurl.Curl()

curl.setopt(pycurl.USERAGENT, 'ViaB viab-gocdb')

outputBuffer = StringIO.StringIO()
curl.setopt(pycurl.URL,            'https://goc.egi.eu/gocdbpi/private/?method=get_site_contacts')
curl.setopt(pycurl.WRITEFUNCTION,  outputBuffer.write)
curl.setopt(pycurl.TIMEOUT,        30)
curl.setopt(pycurl.FOLLOWLOCATION, False)
curl.setopt(pycurl.SSL_VERIFYPEER, 1)
curl.setopt(pycurl.SSL_VERIFYHOST, 2)
curl.setopt(pycurl.SSLVERSION,     pycurl.SSLVERSION_TLSv1)
curl.setopt(pycurl.SSLCERT,        '/etc/grid-security/repo.gridpp.ac.uk.cert.pem')
curl.setopt(pycurl.SSLKEY,         '/etc/grid-security/repo.gridpp.ac.uk.key.pem')
curl.setopt(pycurl.CAPATH,         '/etc/grid-security/certificates')                        

try:
  curl.perform()
except Exception as e:
  print 'Fetch XML from GOCDB fails with ' + str(e)
  sys.exit(1)

gocdbSites = xml.etree.cElementTree.fromstring(outputBuffer.getvalue()).findall("./SITE/")

# Connect to database
try:
  db  = MySQLdb.connect(host="localhost", user=viab_cgi_conf.mysqlUser, passwd=viab_cgi_conf.mysqlPassword, db='viab')
  cur = db.cursor(MySQLdb.cursors.DictCursor)
except Exception as e:
  logLine('Failed with database problem (' + str(e) + ')')
  sys.exit(1)

# Get list of sites       
try:
  cur.execute('SELECT siteid,sitename FROM sites')
  sitesRows = cur.fetchall()
except Exception as e:
  logLine('Failed getting sites from database (' + str(e) + ')')
  sys.exit(1)

nowTime = int(time.time())

for siteRow in sitesRows:
  
  for gocdbSite in gocdbSites:
  
    if 'NAME' in gocdbSite.attrib and siteRow['sitename'] == gocdbSite.attrib['NAME']:
      print gocdbSite.attrib['NAME'],str(gocdbSite)          

      for child in gocdbSite:
        if child.tag == 'CONTACT':
          certdn    = ''
          role_name = ''
          
          for grandchild in child:
            if grandchild.tag == 'CERTDN':
              certdn = grandchild.text
            elif grandchild.tag == 'ROLE_NAME':
              role_name = grandchild.text
          
          if certdn and (role_name == 'Site Operations Manager' or role_name == 'Site Administrator'):
              
            print gocdbSite.attrib['NAME'],certdn,role_name
            
            try:
              cur.execute('INSERT IGNORE siteadmins SET siteid=%s,dn=%s,added=NOW(),updated=FROM_UNIXTIME(%s),source="GOCDB"', (siteRow['siteid'], certdn, nowTime))
              cur.execute('UPDATE siteadmins SET updated=FROM_UNIXTIME(%s) WHERE source="GOCDB" AND siteid=%s AND dn=%s', (nowTime, siteRow['siteid'], certdn))
            except Exception as e:
              logLine('INSERT/UPDATE fails with ' + str(e))

try:
  cur.execute('DELETE FROM siteadmins WHERE source="GOCDB" AND UNIX_TIMESTAMP(updated) <> %s', nowTime)
except Exception as e:
  logLine('DELETE fails with ' + str(e))

